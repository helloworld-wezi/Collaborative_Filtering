import numpy as np
import kmeans
import common
import naive_em
import em

X = np.loadtxt("toy_data.txt")

# # TODO: Your code here
# # Q1 K-means
# Ks = [1, 2, 3, 4]
# seeds = [0, 1, 2, 3, 4]
#
# for K in Ks:
#     for seed in seeds:
#         mixture_dm, post_dm = common.init(X, K, seed)
#         mixture_dm_out, post_dm_out, cost_dm_out = kmeans.run(X, mixture_dm, post_dm)
#         print("K:", K, "and seed:", seed, "-> cost:", cost_dm_out)

# K | best seed
# 1 | 0
# 2 | 0
# 3 | 3
# 4 | 4

# K = 3
# seed = 0
# mixture_dm, post_dm = common.init(X, K, seed)
# mixture_dm_out, post_dm_out, cost_dm_out = kmeans.run(X, mixture_dm, post_dm)
# common.plot(X, mixture_dm_out, post_dm_out, "K-means with K: " + str(K) + " and seed: " + str(seed))

# print(X)
# K = 4
# seed = 4
# mixture_dm, post_dm = common.init(X, K, seed)
# X = np.array([[0.85794562, 0.84725174],
#      [0.6235637, 0.38438171],
#      [0.29753461, 0.05671298],
#      [0.27265629, 0.47766512],
#      [0.81216873, 0.47997717],
#      [0.3927848, 0.83607876],
#      [0.33739616, 0.64817187],
#      [0.36824154, 0.95715516],
#      [0.14035078, 0.87008726],
#      [0.47360805, 0.80091075],
#      [0.52047748, 0.67887953],
#      [0.72063265, 0.58201979],
#      [0.53737323, 0.75861562],
#      [0.10590761, 0.47360042],
#      [0.18633234, 0.73691818]])
# mu = np.array([[0.6235637, 0.38438171],
#       [0.3927848, 0.83607876],
#       [0.81216873, 0.47997717],
#       [0.14035078, 0.87008726],
#       [0.36824154, 0.95715516],
#       [0.10590761, 0.47360042]])
# var = np.array([0.10038354, 0.07227467, 0.13240693, 0.12411825, 0.10497521, 0.12220856])
# p = np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# mixture_dm = common.GaussianMixture(mu, var, p)
# post, ll = naive_em.estep(X, mixture_dm)
# print(post)
# print(ll)

# # Q3 EM
# Ks = [1, 2, 3, 4]
# seeds = [0, 1, 2, 3, 4]
#
# for K in Ks:
#     for seed in seeds:
#         mixture_dm, post_dm = common.init(X, K, seed)
#         mixture_dm_out, post_dm_out, cost_dm_out = naive_em.run(X, mixture_dm, post_dm)
#         print("K:", K, "and seed:", seed, "-> log likelihood:", cost_dm_out)

K = 4
seed = 0
mixture_dm, post_dm = common.init(X, K, seed)
mixture_dm_out, post_dm_out, cost_dm_out = naive_em.run(X, mixture_dm, post_dm)
common.plot(X, mixture_dm_out, post_dm_out, "K-means with K: " + str(K) + " and seed: " + str(seed))

# Q4: BIC
# X = np.array([[0.85794562, 0.84725174],
#               [0.6235637, 0.38438171],
#               [0.29753461, 0.05671298],
#               [0.27265629, 0.47766512],
#               [0.81216873, 0.47997717],
#               [0.3927848, 0.83607876],
#               [0.33739616, 0.64817187],
#               [0.36824154, 0.95715516],
#               [0.14035078, 0.87008726],
#               [0.47360805, 0.80091075],
#               [0.52047748, 0.67887953],
#               [0.72063265, 0.58201979],
#               [0.53737323, 0.75861562],
#               [0.10590761, 0.47360042],
#               [0.18633234, 0.73691818]])
#
# K = 6
# Mu = np.array([[0.6235637, 0.38438171],
#                [0.3927848, 0.83607876],
#                [0.81216873, 0.47997717],
#                [0.14035078, 0.87008726],
#                [0.36824154, 0.95715516],
#                [0.10590761, 0.47360042]])
#
# Var = np.array([0.10038354, 0.07227467, 0.13240693, 0.12411825, 0.10497521, 0.12220856])
# P = np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# LL = -1898.182496
# mixture = common.GaussianMixture(Mu, Var, P)
# out = common.bic(X, mixture, LL)
# print(out)

# Ks = [1, 2, 3, 4]
#
# for K in Ks:
#     mixture_dm, post_dm = common.init(X, K)
#     mixture_dm_out, post_dm_out, cost_dm_out = naive_em.run(X, mixture_dm, post_dm)
#     bic_out = common.bic(X, mixture_dm_out, cost_dm_out)
#     print("K:", K, "-> log likelihood:", cost_dm_out, "BIC:", bic_out)

# Q6 matrix completion
# X = np.array([[0.85794562, 0.84725174],
#               [0.6235637, 0.38438171],
#               [0.29753461, 0.05671298],
#               [0.27265629, 0.47766512],
#               [0.81216873, 0.47997717],
#               [0.3927848, 0.83607876],
#               [0.33739616, 0.64817187],
#               [0.36824154, 0.95715516],
#               [0.14035078, 0.87008726],
#               [0.47360805, 0.80091075],
#               [0.52047748, 0.67887953],
#               [0.72063265, 0.58201979],
#               [0.53737323, 0.75861562],
#               [0.10590761, 0.47360042],
#               [0.18633234, 0.73691818]])
#
# K = 6
# Mu = np.array([[0.6235637, 0.38438171],
#                [0.3927848, 0.83607876],
#                [0.81216873, 0.47997717],
#                [0.14035078, 0.87008726],
#                [0.36824154, 0.95715516],
#                [0.10590761, 0.47360042]])
#
# Var = np.array([0.10038354, 0.07227467, 0.13240693, 0.12411825, 0.10497521, 0.12220856])
# P = np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# X = np.array([[0.85794562, 0.84725174],
#               [0.6235637, 0.38438171],
#               [0.29753461, 0.05671298],
#               [0., 0.47766512],
#               [0., 0.],
#               [0.3927848, 0.],
#               [0., 0.64817187],
#               [0.36824154, 0.],
#               [0., 0.87008726],
#               [0.47360805, 0.],
#               [0., 0.],
#               [0., 0.],
#               [0.53737323, 0.75861562],
#               [0.10590761, 0.],
#               [0.18633234, 0.]])
# K = 6
# Mu = np.array([[0.6235637, 0.38438171],
#                [0.3927848, 0.],
#                [0., 0.],
#                [0., 0.87008726],
#                [0.36824154, 0.],
#                [0.10590761, 0.]])
# Var = np.array([0.16865269, 0.14023295, 0.1637321, 0.3077471, 0.13718238, 0.14220473])
# P = np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# mixture_dm = common.GaussianMixture(Mu, Var, P)
# # post, ll = em.estep(X, mixture_dm)
# # print(post)
# # print(ll)
#
#
# post = np.array([[0.15765074, 0.20544344, 0.17314824, 0.15652173, 0.12169798, 0.18553787],
#                  [0.1094766, 0.22310587, 0.24109142, 0.0959303, 0.19807563, 0.13232018],
#                  [0.22679645, 0.36955206, 0.02836173, 0.03478709, 0.00807236, 0.33243031],
#                  [0.16670188, 0.18637975, 0.20964608, 0.17120102, 0.09886116, 0.16721011],
#                  [0.04250305, 0.22996176, 0.05151538, 0.33947585, 0.18753121, 0.14901275],
#                  [0.09799086, 0.28677458, 0.16895715, 0.21054678, 0.0069597, 0.22877093],
#                  [0.16764519, 0.16897033, 0.25848053, 0.18674186, 0.09846462, 0.11969746],
#                  [0.28655211, 0.02473762, 0.27387452, 0.27546459, 0.08641467, 0.05295649],
#                  [0.11353057, 0.13090863, 0.20522811, 0.15786368, 0.35574052, 0.03672849],
#                  [0.10510461, 0.08116927, 0.3286373, 0.12745369, 0.23464272, 0.12299241],
#                  [0.09757735, 0.06774952, 0.40286261, 0.08481828, 0.1206645, 0.22632773],
#                  [0.24899344, 0.02944918, 0.25413459, 0.02914503, 0.29614373, 0.14213403],
#                  [0.35350682, 0.21890411, 0.26755234, 0.01418274, 0.10235276, 0.04350123],
#                  [0.15555757, 0.06236572, 0.16703133, 0.21760554, 0.03369562, 0.36374421],
#                  [0.1917808, 0.08982788, 0.17710673, 0.03179658, 0.19494387, 0.31454414]])
#
# mixture_out = em.mstep(X, post, mixture_dm)
# print(mixture_out)


# Q7
# X = np.loadtxt("netflix_incomplete.txt")
# Ks = [12]
# seeds = [0, 1, 2, 3, 4]
# # best seed = 1
#
# for K in Ks:
#     for seed in seeds:
#         mixture_dm, post_dm = common.init(X, K, seed)
#         mixture_dm_out, post_dm_out, cost_dm_out = em.run(X, mixture_dm, post_dm)
#         print("K:", K, "and seed:", seed, "-> cost:", cost_dm_out)

#
#
#
# X = np.loadtxt("netflix_incomplete.txt")
# K = 12
# seed = 1
# mixture_dm, post_dm = common.init(X, K, seed)
# mixture_dm_out, post_dm_out, cost_dm_out = em.run(X, mixture_dm, post_dm)
# X_pred = em.fill_matrix(X, mixture_dm_out)
# X_gold = np.loadtxt("netflix_complete.txt")
# rmse = common.rmse(X_pred, X_gold)
# print(rmse)